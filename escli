#!/usr/bin/env python

# escli is a command line tool for interacting with Elasticsearch.
# Only some of the Elasticsearch API is implemented.
# dealing with documents and search
#
# Usage:
# escli [options] <command> [command-options]
#
# Commands:
#   ping        Ping the cluster
#   search      Search for documents in the cluster
#   get         Get a document by id
#   add         Index documents
#   delete      Delete documents
#   update      Update documents
#   count       Count documents
#   mlt         More Like This
#   mappings    Add mappings to the index
#   drop        Drop the index
#   create      Create an index

import argparse
import json
import os
import select
import sys
import warnings

import requests
import yaml

warnings.filterwarnings("ignore", message="Unverified HTTPS request")

home_dir = os.environ["HOME"]
config_file = os.path.join(home_dir, ".escli.yaml")


def main():
    parser = argparse.ArgumentParser(description="Elasticsearch command-line interface")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        dest="verbose",
        default=False,
        help="Verbose output",
    )
    parser.add_argument(
        "-s",
        "--server",
        dest="server",
        default=None,
        help="Elasticsearch host (default: read from config file, or https://localhost:9200)",
    )
    parser.add_argument(
        "-i", "--index", dest="index", default=None, help="Elasticsearch index"
    )
    parser.add_argument(
        "-k", "--api_key", dest="api_key", default=None, help="Elasticsearch API Key"
    )
    parser.add_argument(
        "-u", "--username", dest="username", default=None, help="Elasticsearch username"
    )
    parser.add_argument(
        "-P", "--password", dest="password", default=None, help="Elasticsearch password"
    )
    parser.add_argument(
        "-F",
        "--ca_fingerprint",
        dest="ca_fingerprint",
        default=None,
        help="CA Certificates fingerprint",
    )
    parser.add_argument(
        "-c",
        "--config",
        dest="config",
        default=config_file,
        help="Configuration file (default: $HOME/.escli.yaml)",
    )
    subparsers = parser.add_subparsers(
        dest="command",
        title="commands",
        description="valid commands",
        help="additional help",
    )

    subparsers.add_parser("ping", help="ping the Elasticsearch server")

    search_parser = subparsers.add_parser(
        "search", help="search the Elasticsearch index"
    )
    search_parser.add_argument(
        "-q",
        "--query",
        type=str,
        dest="query",
        default=None,
        help="set the search query",
    )
    search_parser.add_argument(
        "-m",
        "--max",
        type=int,
        dest="max",
        default=50,
        help="set the maximum size of the result set",
    )

    get_parser = subparsers.add_parser(
        "get", help="get a document from the Elasticsearch index"
    )
    get_parser.add_argument(
        "-id",
        "--document_id",
        type=str,
        dest="document_id",
        default=None,
        help="set the document ID",
    )

    add_parser = subparsers.add_parser(
        "add", help="add documents to the Elasticsearch index"
    )
    add_parser.add_argument(
        "-b",
        "--batchsize",
        type=int,
        dest="batchsize",
        default=100,
        help="Default batch size for adding documents",
    )
    add_parser.add_argument(
        "--key",
        type=str,
        dest="key",
        default=None,
        help="key of the document to use as the document ID",
    )

    delete_parser = subparsers.add_parser(
        "delete", help="delete documents from the Elasticsearch index"
    )
    delete_parser.add_argument(
        "-b",
        "--batchsize",
        type=int,
        dest="batchsize",
        default=100,
        help="Default batch size for deleting documents",
    )
    delete_parser.add_argument(
        "--key",
        type=str,
        dest="key",
        default=None,
        help="key of the document to use as the document ID (optional; if not specified, the document ID is the document itself)",
    )

    update_parser = subparsers.add_parser(
        "update", help="update/upsert documents in the Elasticsearch index"
    )
    update_parser.add_argument(
        "-b",
        "--batchsize",
        type=int,
        dest="batchsize",
        default=100,
        help="Default batch size for updating documents",
    )
    update_parser.add_argument(
        "--key",
        type=str,
        dest="key",
        default=None,
        help="key of the document to use as the document ID",
    )
    update_parser.add_argument(
        "--upsert",
        action="store_true",
        dest="upsert",
        default=False,
        help="upsert documents",
    )

    subparsers.add_parser(
        "count", help="count the number of documents in the Elasticsearch index"
    )

    mlt_parser = subparsers.add_parser("mlt", help="More Like This")
    mlt_parser.add_argument(
        "-id",
        "--document_id",
        type=str,
        dest="document_id",
        default=None,
        help="set the document ID",
    )
    mlt_parser.add_argument(
        "-m",
        "--max",
        type=int,
        dest="max",
        default=50,
        help="set the maximum size of the result set",
    )
    mlt_parser.add_argument(
        "--max_query_terms",
        type=int,
        dest="max_query_terms",
        default=100,
        help="set the maximum number of query terms that will be selected",
    )

    subparsers.add_parser("mappings", help="Add mappings to the index")

    subparsers.add_parser("drop", help="Drop an index")

    subparsers.add_parser("create", help="Create an index")

    args, remaining = parser.parse_known_args()

    if not args.command:
        parser.print_help()
        parser.error("No command specified")

    configuration = configure(args)
    args.configuration = configuration

    if args.command == "ping":
        ping_command(args, remaining)
    elif args.command == "search":
        search_command(args, remaining)
    elif args.command == "get":
        get_command(args, remaining)
    elif args.command == "add":
        add_command(args, remaining)
    elif args.command == "delete":
        delete_command(args, remaining)
    elif args.command == "update":
        update_command(args, remaining)
    elif args.command == "count":
        count_command(args, remaining)
    elif args.command == "mlt":
        mlt_command(args, remaining)
    elif args.command == "mappings":
        mappings_command(args, remaining)
    elif args.command == "drop":
        drop_command(args, remaining)
    elif args.command == "create":
        create_command(args, remaining)
    else:
        parser.error("Invalid command: %s" % args.command)


def ping_command(options, args):
    """
    Sends a ping request to the Elasticsearch server and prints the response.

    Args:
        options (argparse.Namespace): The command-line options.
        args (list): The command-line arguments.

    Returns:
        A JSON object with the status of the server, or an error message.
        The `ok` key is `True` if the server is up, `False` otherwise.

    Raises:
        None

    Examples:
        To ping the Elasticsearch server:
        >>> ping_command(options, [])

    """
    try:
        r = es_get_request(options, "/")
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def search_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    # accounts/_search
    if options.query is None:
        options.query = read_stdin()
    if options.query is None:
        raise ValueError("Missing query")
    max = options.max
    q, is_obj = safe_json_loads(options.query)
    if not is_obj:
        query = {"size": max, "query": {"query_string": {"query": q}}}
    else:
        query = {"size": max, "query": q}
    path = "/" + index + "/_search"
    try:
        r = es_request("post", options, path, data=jsonify(query))
        x = r.json()
        hits = hits_hits(x)
        for hit in hits:
            print(jsonify(hit["_source"]))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def get_command(options, args):
    # accounts/#{id}
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    if options.document_id is None:
        raise ValueError("Missing document ID")
    path = (
        "/"
        + index
        + "/_doc/"
        + str(options.document_id)
    )
    try:
        r = es_get_request(options, path)
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def add_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    if options.key is None:
        raise ValueError("Missing key")
    for batch in read_input_in_batches(options.batchsize):
        docs = []
        for line in batch:
            try:
                doc = json.loads(line)
                instruction = {"index": {"_index": index, "_id": doc[options.key]}}
                docs.append(instruction)
                docs.append(doc)
            except Exception as e:
                print(jsonify({"ok": False, "error": str(e)}))
        try:
            r = es_request(
                "post",
                options,
                "/_bulk",
                data="\n".join([jsonify(d) for d in docs]) + "\n",
            )
            x = r.json()
            items = x["items"]
            x["items_added"] = len(successfully_added_items(items))
            del x["items"]
            x["ok"] = r.ok
            x["status"] = r.status_code
            x["server"] = get_server_name(options)[1]
            print(jsonify(x))
        except Exception as e:
            print(jsonify({"ok": False, "error": str(e)}))


def delete_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    for batch in read_input_in_batches(options.batchsize):
        docs = []
        for line in batch:
            try:
                doc = json.loads(line)
                if type(doc) is not dict:
                    instruction = {"delete": {"_index": index, "_id": doc}}
                else:
                    key = options.key
                    if key is None:
                        raise ValueError("Missing key")
                    instruction = {"delete": {"_index": index, "_id": doc[key]}}
                docs.append(instruction)
            except Exception as e:
                print(jsonify({"ok": False, "error": str(e)}))
        try:
            r = es_request(
                "post",
                options,
                "/_bulk",
                data="\n".join([jsonify(d) for d in docs]) + "\n",
            )
            x = r.json()
            items = x["items"]
            x["items_deleted"] = len(successfully_deleted_items(items))
            del x["items"]
            x["ok"] = r.ok
            x["status"] = r.status_code
            x["server"] = get_server_name(options)[1]
            print(jsonify(x))
        except Exception as e:
            print(jsonify({"ok": False, "error": str(e)}))


def update_command(options, args):
    if options.key is None:
        raise ValueError("Missing key")
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    for batch in read_input_in_batches(options.batchsize):
        docs = []
        for line in batch:
            try:
                doc = json.loads(line)
                instruction = {"update": {"_index": index, "_id": doc[options.key]}}
                docs.append(instruction)
                doc = {"doc": doc}
                if options.upsert:
                    doc["doc_as_upsert"] = True
                docs.append(doc)
            except Exception as e:
                print(jsonify({"ok": False, "error": str(e)}))
        try:
            r = es_request(
                "post",
                options,
                "/_bulk",
                data="\n".join([jsonify(d) for d in docs]) + "\n",
            )
            x = r.json()
            items = x["items"]
            x["items_updated"] = len(successfully_updated_items(items))
            del x["items"]
            x["ok"] = r.ok
            x["status"] = r.status_code
            x["server"] = get_server_name(options)[1]
            print(jsonify(x))
        except Exception as e:
            print(jsonify({"ok": False, "error": str(e)}))


def count_command(options, args):
    # accounts/_count
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    path = "/" + index + "/_count"
    try:
        r = es_get_request(options, path)
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        x = remove_anon_keys(x)
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def mlt_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    if options.document_id is None:
        raise ValueError("Missing document ID")
    max = options.max
    max_query_terms = options.max_query_terms
    query = {
        "size": max,
        "query": {
            "more_like_this": {
                "like": [
                    {
                        "_index": index,
                        "_id": options.document_id,
                    }
                ],
                "min_term_freq": 1,
                "max_query_terms": max_query_terms,
            }
        },
    }
    path = "/" + index + "/_search"
    try:
        r = es_request("post", options, path, data=jsonify(query))
        x = r.json()
        hits = hits_hits(x)
        for hit in hits:
            print(jsonify(hit["_source"]))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def mappings_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    path = "/" + index
    # read the mappings from stdin
    mappings = json.loads(sys.stdin.read())
    # does it have a 'mappings' key?
    if "mappings" not in mappings:
        mappings = {"mappings": mappings}
    # does it have a 'properties' key in the 'mappings' key?
    if "properties" not in mappings["mappings"]:
        raise ValueError('Missing "properties" key in "mappings"')
    try:
        r = es_request("put", options, path, data=jsonify(mappings))
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def drop_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    path = "/" + index
    try:
        r = es_request("delete", options, path)
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        x["index"] = index
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


def create_command(options, args):
    found, index = get_index_name(options)
    if not found:
        print(jsonify({"ok": False, "error": "No index specified"}))
        return
    path = "/" + index
    try:
        r = es_request("put", options, path)
        x = r.json()
        x["ok"] = r.ok
        x["status"] = r.status_code
        x["server"] = get_server_name(options)[1]
        print(jsonify(x))
    except Exception as e:
        print(jsonify({"ok": False, "error": str(e)}))


# Utility functions


def read_input_in_batches(batch_size=100):
    batch = []
    for line in sys.stdin:
        batch.append(line.strip())
        if len(batch) == batch_size:
            yield batch
            batch = []
    if batch:
        yield batch


def remove_anon_keys(d):
    for k in list(d.keys()):
        if k.startswith("_"):
            del d[k]
    return d


def configure(options):
    config = {}
    if options.config is not None:
        config_file = options.config
        if os.path.exists(config_file):
            with open(config_file, "r") as f:
                config = yaml.safe_load(f)
    if options.server is not None:
        config["ELASTICSEARCH_SERVER"] = options.server
    if config["ELASTICSEARCH_SERVER"] is None:
        config["ELASTICSEARCH_SERVER"] = "https://localhost:9200"
    if options.index is not None:
        config["ELASTICSEARCH_INDEX"] = options.index
    if options.api_key is not None:
        config["ELASTICSEARCH_API_KEY"] = options.api_key
    if options.username is not None:
        config["ELASTICSEARCH_USER"] = options.username
    if options.password is not None:
        config["ELASTICSEARCH_PASSWORD"] = options.password
    if options.ca_fingerprint is not None:
        config["ELASTICSEARCH_CERTIFICATE_FINGERPRINT"] = options.ca_fingerprint
    return config


def es_request(request_type, options, path, data=None):
    ok, server = get_server_name(options)
    if not ok:
        raise ValueError("No server specified")
    url = server + path
    headers = {}
    if options.configuration["ELASTICSEARCH_API_KEY"] is not None:
        headers["Authorization"] = (
            "ApiKey " + options.configuration["ELASTICSEARCH_API_KEY"]
        )
    elif options.configuration["ELASTICSEARCH_USER"] is not None:
        headers["Authorization"] = (
            "Basic "
            + options.configuration["ELASTICSEARCH_USER"]
            + ":"
            + options.configuration["ELASTICSEARCH_PASSWORD"]
        )
    if options.configuration["ELASTICSEARCH_CERTIFICATE_FINGERPRINT"] is not None:
        headers["X-SSL-CERTIFICATE-FINGERPRINT"] = options.configuration[
            "ELASTICSEARCH_CERTIFICATE_FINGERPRINT"
        ]
    headers["Content-Type"] = "application/json"
    if request_type == "get":
        return requests.get(url, headers=headers, verify=False)
    if request_type == "post":
        return requests.post(url, headers=headers, data=data, verify=False)
    if request_type == "put":
        return requests.put(url, headers=headers, verify=False)
    if request_type == "delete":
        return requests.delete(url, headers=headers, verify=False)
    raise ValueError("Invalid request type: %s" % request_type)


def read_stdin():
    """
    Reads data from standard input (stdin) if available.

    Returns:
        str or None: The data read from stdin, or None if no data is available.

    Examples:
        To read data from stdin:
        >>> data = read_stdin()
        >>> if data is not None:
        ...     print("Data read from stdin:", data)
        ... else:
        ...     print("No data waiting on stdin")
    """
    if select.select(
        [
            sys.stdin,
        ],
        [],
        [],
        0.0,
    )[0]:
        return sys.stdin.read()
    else:
        return None


def es_get_request(options, path):
    return es_request("get", options, path)


def jsonify(obj):
    return json.dumps(obj, sort_keys=True)


def safe_json_loads(obj):
    """
    Safely loads a JSON string into a Python object.

    Args:
        obj (str): The JSON string to load.

    Returns:
        tuple: A tuple containing the loaded Python object and a boolean indicating if the JSON string was valid.

    """
    try:
        return json.loads(obj), True
    except json.JSONDecodeError:
        return obj, False


def hits_hits(obj):
    """
    Extracts the "hits" list from an Elasticsearch response object.

    Args:
        obj (dict): The Elasticsearch response object.

    Returns:
        list or dict: The "hits" list, or the original object if it does not contain a "hits" list.

    """
    if "hits" in obj:
        if "hits" in obj["hits"]:
            return obj["hits"]["hits"]
    return obj


def successfully_indexed_items(items, key):
    """
    Filters a list of Elasticsearch response objects to include only those that were successfully indexed.

    Args:
        items (list): The list of Elasticsearch response objects.
        key (str): The key to use to check the status of each object.

    Returns:
        list: The list of successfully indexed objects.

    """
    return [i for i in items if i.get(key, {}).get("status") in (200, 201)]


def successfully_added_items(items):
    """
    Filters a list of Elasticsearch response objects to include only those that were successfully added.

    Args:
        items (list): The list of Elasticsearch response objects.

    Returns:
        list: The list of successfully added objects.

    """
    return successfully_indexed_items(items, "index")


def successfully_deleted_items(items):
    """
    Filters a list of Elasticsearch response objects to include only those that were successfully deleted.

    Args:
        items (list): The list of Elasticsearch response objects.

    Returns:
        list: The list of successfully deleted objects.

    """
    return successfully_indexed_items(items, "delete")


def successfully_updated_items(items):
    """
    Filters a list of Elasticsearch response objects to include only those that were successfully updated.

    Args:
        items (list): The list of Elasticsearch response objects.

    Returns:
        list: The list of successfully updated objects.

    """
    return successfully_indexed_items(items, "update")

# Some configuration functions


def get_index_name(options):
    """
    Returns the Elasticsearch index name from the command-line options.

    Args:
        options (argparse.Namespace): The command-line options.

    Returns:
        tuple: A tuple containing a boolean indicating if the index name is present, and the index name or an error message.

    Raises:
        None

    Examples:
        To get the Elasticsearch index name:
        >>> success, index = get_index_name(options)
        >>> if success:
        ...     print("Elasticsearch index name:", index)
        ... else:
        ...     print("Index name was not specified")

    """
    if options.configuration["ELASTICSEARCH_INDEX"] is None:
        return (False, None)
    return (True, options.configuration["ELASTICSEARCH_INDEX"])


def get_server_name(options):
    """
    Returns the Elasticsearch server name from the command-line options.

    Args:
        options (argparse.Namespace): The command-line options.

    Returns:
        tuple: A tuple containing a boolean indicating if the server name is present, and the server name or an error message.

    Raises:
        None

    Examples:
        To get the Elasticsearch server name:
        >>> success, server = get_server_name(options)
        >>> if success:
        ...     print("Elasticsearch server name:", server)
        ... else:
        ...     print("Server name was not specified")

    """
    if options.configuration["ELASTICSEARCH_SERVER"] is None:
        return (False, None)
    return (True, options.configuration["ELASTICSEARCH_SERVER"])


if __name__ == "__main__":
    main()
